'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class, _temp, _initialiseProps;

// import for the iconfont arrow-down
// do not delete this because of the css iconfont


var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _rcMenu = require('rc-menu');

var _rcMenu2 = _interopRequireDefault(_rcMenu);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _icon = require('@icedesign/icon');

var _icon2 = _interopRequireDefault(_icon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// eslint-disable-line

// selectedKeys openKeys props 不要随便设置默认值，否则可能会触发一些值获取逻辑从而出现问题

var noop = function noop() {};

var IceMenu = (_temp = _class = function (_Component) {
  _inherits(IceMenu, _Component);

  function IceMenu(props) {
    _classCallCheck(this, IceMenu);

    var _this = _possibleConstructorReturn(this, (IceMenu.__proto__ || Object.getPrototypeOf(IceMenu)).call(this, props));

    _initialiseProps.call(_this);

    var openKeys = [].concat(_toConsumableArray(props.defaultOpenKeys), _toConsumableArray(props.openKeys || []));

    _this.state = {
      openKeys: openKeys
    };
    return _this;
  }

  _createClass(IceMenu, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.mode === 'inline' && nextProps.mode !== 'inline') {
        this.switchModeFromInline = true;
      }
      if ('openKeys' in nextProps) {
        this.setState({ openKeys: nextProps.openKeys });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _classNames;

      var props = {};

      var className = (0, _classnames2.default)(this.props.className, (_classNames = {}, _defineProperty(_classNames, this.props.prefixCls + '-' + this.props.color + '-' + this.props.theme, this.props.color), _defineProperty(_classNames, this.props.prefixCls + '-' + this.props.theme, !this.props.color), _defineProperty(_classNames, this.props.prefixCls + '-collapse', this.props.inlineCollapsed), _classNames));

      if (this.props.mode !== 'inline') {
        // There is this.state.openKeys for
        // closing vertical popup submenu after click it
        props = {
          openKeys: this.state.openKeys,
          onClick: this.handleClick,
          onOpenChange: this.handleOpenChange,
          className: className
        };
      } else if (this.props.inlineCollapsed) {
        props = {
          className: className,
          mode: 'vertical'
        };
      } else {
        props = {
          className: className
        };
      }

      return _react2.default.createElement(_rcMenu2.default, _extends({}, this.props, props));
    }
  }]);

  return IceMenu;
}(_react.Component), _class.displayName = 'IceMenu', _class.propTypes = {
  /**
   * className 前缀
   */
  prefixCls: _propTypes2.default.string,
  /**
   * 主题风格（暗色系、亮色系）
   */
  theme: _propTypes2.default.oneOf(['light', 'dark']),
  /**
   * 主题颜色
   */
  color: _propTypes2.default.oneOf(['', 'green', 'red', 'blue', 'orange', 'reseo']),
  /**
   * 当前选中的菜单项 key 数组
   */
  selectedKeys: _propTypes2.default.arrayOf(_propTypes2.default.string), // eslint-disable-line
  /**
   * 初始选中的菜单项 key 数组
   */
  defaultSelectedKeys: _propTypes2.default.arrayOf(_propTypes2.default.string),
  /**
   * 初始展开的 SubMenu 菜单项 key 数组
   */
  defaultOpenKeys: _propTypes2.default.arrayOf(_propTypes2.default.string),
  /**
   * 当前展开的 SubMenu 菜单项 key 数组
   */
  openKeys: _propTypes2.default.arrayOf(_propTypes2.default.string), // eslint-disable-line
  /**
   * 菜单类型，现在支持垂直、水平、和内嵌模式三种 string: vertical horizontal inline
   */
  mode: _propTypes2.default.string,
  /**
   * 是否允许多选
   */
  multiple: _propTypes2.default.bool,
  /**
   * inline 模式的菜单缩进宽度
   */
  inlineIndent: _propTypes2.default.number,
  /**
   * 点击 MenuItem 调用此函数
   * @param {object} clickItem - 被点击的 item 相关信息
   * @param {object} clickItem.item - 被点击的 item
   * @param {string} clickItem.key - 被点击的 item 的 key
   * @param {array} clickItem.keyPath  - 被点击的 item 的路径
   */
  onClick: _propTypes2.default.func,
  /**
   * SubMenu 展开/关闭的回调
   * @param {string} openKeys - 打开的 keys
   */
  onOpenChange: _propTypes2.default.func,
  /**
   * 被选中时调
   * @param {object} selectedItem - 被选中的 item 相关信息
   * todo
   * @param {object} selectedItem.item - 被选中的 item
   * @param {string} selectedItem.key - 被选中的 item 的 key
   * @param {array} selectedItem.selectedKeys  - 当前被选中的 keys
   */
  onSelect: _propTypes2.default.func,
  /**
   * 取消选中时调用，仅在 multiple 生效
   * @param {object} selectedItem - 被取消选中的 item 相关信息
   * @param {object} selectedItem.item - 被取消选中的 item
   * @param {string} selectedItem.key - 被取消选中的 item 的 key
   * @param {array} selectedItem.selectedKeys  - 当前被选中的 keys
   */
  onDeselect: _propTypes2.default.func,
  /**
   * inline 时菜单是否收起状态
   */
  inlineCollapsed: _propTypes2.default.bool,
  /**
   * className
   */
  className: _propTypes2.default.string,
  openSubMenuOnMouseEnter: _propTypes2.default.bool,
  closeSubMenuOnMouseLeave: _propTypes2.default.bool,
  selectable: _propTypes2.default.bool
}, _class.defaultProps = {
  prefixCls: 'ice-menu',
  className: '',
  color: '',
  mode: 'vertical',
  openSubMenuOnMouseEnter: true,
  closeSubMenuOnMouseLeave: true,
  selectable: true,
  inlineCollapsed: undefined,
  multiple: false,
  inlineIndent: 24,
  onClick: noop,
  onSelect: noop,
  onOpenChange: noop,
  onDeselect: noop,
  defaultSelectedKeys: [],
  defaultOpenKeys: [],
  theme: 'light'
}, _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.handleClick = function (e) {
    _this2.setOpenKeys([]);

    var onClick = _this2.props.onClick;

    if (onClick) {
      onClick(e);
    }
  };

  this.handleOpenChange = function (openKeys) {
    _this2.setOpenKeys(openKeys);

    var onOpenChange = _this2.props.onOpenChange;

    if (onOpenChange) {
      onOpenChange(openKeys);
    }
  };

  this.setOpenKeys = function (openKeys) {
    if (!('openKeys' in _this2.props)) {
      _this2.setState({ openKeys: openKeys });
    }
  };
}, _temp);
exports.default = IceMenu;
module.exports = exports['default'];